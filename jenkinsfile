pipeline {
    agent any

    // Definimos los parámetros para las variables de la base de datos
    parameters {
        string(name: 'SERVER_PORT', defaultValue: '9092', description: 'Puerto a exponer para la aplicación')
        string(name: 'CROSS_ORIGIN', defaultValue: 'http://localhost', description: 'Url de la aplicación front-end')
        string(name: 'DB_USER', defaultValue: 'postgres', description: 'Usuario de la base de datos')
        password(name: 'DB_PASS', defaultValue: 'D3v3l0p3r2023*', description: 'Contraseña de la base de datos')
        string(name: 'DB_URL', defaultValue: 'jdbc:postgresql://localhost:5432/dbsales', description: 'URL de la base de datos')
        string(name: 'DEPLOY_DIR', defaultValue: 'C:\\deploy\\springboot_app', description: 'Directorio de despliegue')
    }

    environment {
        // Asignamos las variables de entorno para usarlas en las etapas
        SERVER_PORT = "${params.SERVER_PORT}"
        CROSS_ORIGIN = "${params.CROSS_ORIGIN}"
        DB_USER = "${params.DB_USER}"
        DB_PASS = "${params.DB_PASS}"
        DB_URL = "${params.DB_URL}"
        DEPLOY_DIR = "${params.DEPLOY_DIR}"
    }

    stages {
        stage('Checkout Proyecto') {
            steps {
                // Clona el repositorio desde la rama main
                git(branch: "main", url: "https://github.com/isalgadoralf/appcrm.git")
            }
        }

        stage('Configurar Propiedades de la Aplicación') {
            steps {
                // Configura las propiedades de la base de datos en el archivo application.properties
                bat """
                powershell -Command "(Get-Content src\\main\\resources\\application.properties) -replace 'server.port=.*', 'server.port=${SERVER_PORT}' | Set-Content src\\main\\resources\\application.properties"
                powershell -Command "(Get-Content src\\main\\resources\\application.properties) -replace 'cors.allowed-origin=.*', 'cors.allowed-origin=${CROSS_ORIGIN}' | Set-Content src\\main\\resources\\application.properties"
                powershell -Command "(Get-Content src\\main\\resources\\application.properties) -replace 'spring.datasource.username=.*', 'spring.datasource.username=${DB_USER}' | Set-Content src\\main\\resources\\application.properties"
                powershell -Command "(Get-Content src\\main\\resources\\application.properties) -replace 'spring.datasource.password=.*', 'spring.datasource.password=${DB_PASS}' | Set-Content src\\main\\resources\\application.properties"
                powershell -Command "(Get-Content src\\main\\resources\\application.properties) -replace 'spring.datasource.url=.*', 'spring.datasource.url=${DB_URL}' | Set-Content src\\main\\resources\\application.properties"
                """
            }
        }

        stage('Compilar') {
            steps {
                // Compila el proyecto con Maven
                bat 'mvn clean install'
            }
        }

        stage('Desplegar en Directorio Local') {
            steps {
                // Despliega el JAR generado en un directorio local
                bat  """
                if not exist ${DEPLOY_DIR} mkdir ${DEPLOY_DIR}
                copy target\\*.jar  ${DEPLOY_DIR}
                """
            }
        }

        stage('Reiniciar JAR en Segundo Plano') {
            steps {
                script {
                    withEnv(['JENKINS_NODE_COOKIE=DontKillMe']) {
                        powershell """
                        \$DeployDir = '${DEPLOY_DIR}'
                        \$JarFile = Get-ChildItem -Path \$DeployDir -Filter *.jar | Select-Object -First 1

                        if (\$JarFile -ne \$null) {
                            # Encuentra el proceso Java específico que ejecuta el JAR
                            \$javaProcess = Get-WmiObject Win32_Process | Where-Object {
                                \$_.CommandLine -match "-jar.*\$JarFile"
                            }

                            # Si se encuentra el proceso, se detiene
                            if (\$javaProcess) {
                                Write-Output "Deteniendo el proceso Java existente con PID: \$javaProcess.ProcessId"
                                Stop-Process -Id \$javaProcess.ProcessId -Force
                            } else {
                                Write-Output "No se encontró un proceso Java en ejecución para detener."
                            }

                            # Inicia el nuevo JAR en segundo plano
                            Write-Output "Iniciando el nuevo JAR en segundo plano..."
                            Start-Process -FilePath "java" -ArgumentList "-jar \$(\$JarFile.FullName)" -WindowStyle Hidden
                        } else {
                            Write-Output "No se encontró ningún archivo JAR en el directorio de despliegue."
                        }
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline ejecutado con éxito.'
        }
        failure {
            echo 'El pipeline falló.'
        }
    }
}